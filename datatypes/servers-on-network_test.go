// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package datatypes

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

var serversOnNetworkCases = []struct {
	description string
	structured  *ServersOnNetwork
	serialized  []byte
}{
	{
		"single-cap",
		NewServersOnNetwork(
			1,
			"server-name",
			"discov-uri",
			[]string{"server-cap-1"},
		),
		[]byte{
			// RecordID
			0x01, 0x00, 0x00, 0x00,
			// ServerName
			0x0b, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
			// DiscoveryURI
			0x0a, 0x00, 0x00, 0x00,
			0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69,
			// ServerCapabilities
			0x01, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x31,
		},
	},
	{
		"multiple-caps",
		NewServersOnNetwork(
			1,
			"server-name",
			"discov-uri",
			[]string{"server-cap-1", "server-cap-2"},
		),
		[]byte{
			// RecordID
			0x01, 0x00, 0x00, 0x00,
			// ServerName
			0x0b, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
			// DiscoveryURI
			0x0a, 0x00, 0x00, 0x00,
			0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69,
			// ServerCapabilities
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x32,
		},
	},
}

func TestDecodeServersOnNetwork(t *testing.T) {
	for _, c := range serversOnNetworkCases {
		got, err := DecodeServersOnNetwork(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.structured); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeServersOnNetwork(t *testing.T) {
	for _, c := range serversOnNetworkCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestServersOnNetworkLen(t *testing.T) {
	for _, c := range serversOnNetworkCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

var serversOnNetworkArrayCases = []struct {
	description string
	structured  *ServersOnNetworkArray
	serialized  []byte
}{
	{
		"normal",
		NewServersOnNetworkArray(
			[]*ServersOnNetwork{
				NewServersOnNetwork(
					1,
					"server-name",
					"discov-uri",
					[]string{"server-cap-1"},
				),
				NewServersOnNetwork(
					1,
					"server-name",
					"discov-uri",
					[]string{"server-cap-1", "server-cap-2"},
				),
			},
		),
		[]byte{
			// ArraySize
			0x02, 0x00, 0x00, 0x00,
			// RecordID
			0x01, 0x00, 0x00, 0x00,
			// ServerName
			0x0b, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
			// DiscoveryURI
			0x0a, 0x00, 0x00, 0x00,
			0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69,
			// ServerCapabilities
			0x01, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x31,
			// RecordID
			0x01, 0x00, 0x00, 0x00,
			// ServerName
			0x0b, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
			// DiscoveryURI
			0x0a, 0x00, 0x00, 0x00,
			0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69,
			// ServerCapabilities
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00,
			0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x70, 0x2d, 0x32,
		},
	},
}

func TestDecodeServersOnNetworkArray(t *testing.T) {
	for _, c := range serversOnNetworkArrayCases {
		got, err := DecodeServersOnNetworkArray(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.structured); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeServersOnNetworkArray(t *testing.T) {
	for _, c := range serversOnNetworkArrayCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestServersOnNetworkArrayLen(t *testing.T) {
	for _, c := range serversOnNetworkArrayCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}
