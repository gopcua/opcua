// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package main

import (
	"bytes"
	"encoding/csv"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
)

func main() {
	// read csv file
	file, err := os.Open("StatusCode.csv")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	// create temporary buffer
	var b bytes.Buffer

	b.WriteString("// Code generated by cmd/status; DO NOT EDIT\n\n")
	b.WriteString("package status\n// StatusCode definitions, generated automatically by cmd/status.\nconst(")

	// loop over each row
	reader := csv.NewReader(file)
	for {
		record, err := reader.Read()
		if err != nil {
			if err == io.EOF {
				break
			}
			// if the error is raised due to wrong number of fields in some lines, just ignore it and write.
			// this is caused because the fields in StatusCode.csv are not quoted, and the last field contains comma.
			if perr, ok := err.(*csv.ParseError); ok {
				if perr.Err == csv.ErrFieldCount {
					b.WriteString(fmt.Sprintf("%s = %s\n", record[0], record[1]))
					continue
				}
			}
			panic(err)
		}
		b.WriteString(fmt.Sprintf("%s = %s\n", record[0], record[1]))
	}

	// close const(...) bracket
	b.Write([]byte(")"))

	// format file
	fmt, err := format.Source(b.Bytes())
	if err != nil {
		panic(err)
	}

	// write formatted code to file
	out, err := os.Create("../../status/status.go")
	if err != nil {
		panic(err)
	}
	defer out.Close()
	out.Write(fmt)

	log.Println("done")
}
