// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package services

import (
	"testing"
)

var testEndpointDescriptionBytes = [][]byte{
	{ // Single
		// EndpointURI
		0x06, 0x00, 0x00, 0x00, 0x65, 0x70, 0x2d, 0x75, 0x72, 0x6c,
		// Server (ApplicationDescription)
		// ApplicationURI
		0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
		// ProductURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// ApplicationName
		0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
		0x6e, 0x61, 0x6d, 0x65,
		// ApplicationType
		0x00, 0x00, 0x00, 0x00,
		// GatewayServerURI
		0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryProfileURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryURIs
		0x02, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
		// ServerCertificate
		0xff, 0xff, 0xff, 0xff,
		// MessageSecurityMode
		0x01, 0x00, 0x00, 0x00,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// UserIdentityTokens
		// ArraySize
		0x02, 0x00, 0x00, 0x00,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// TransportProfileURI
		0x09, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x75, 0x72, 0x69,
		// SecurityLevel
		0x00,
	},
	{ // Multiple
		// ArraySize
		0x02, 0x00, 0x00, 0x00,
		// EndpointURI
		0x06, 0x00, 0x00, 0x00, 0x65, 0x70, 0x2d, 0x75, 0x72, 0x6c,
		// Server (ApplicationDescription)
		// ApplicationURI
		0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
		// ProductURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// ApplicationName
		0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
		0x6e, 0x61, 0x6d, 0x65,
		// ApplicationType
		0x00, 0x00, 0x00, 0x00,
		// GatewayServerURI
		0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryProfileURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryURIs
		0x02, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
		// ServerCertificate
		0xff, 0xff, 0xff, 0xff,
		// MessageSecurityMode
		0x01, 0x00, 0x00, 0x00,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// UserIdentityTokens
		// ArraySize
		0x02, 0x00, 0x00, 0x00,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// TransportProfileURI
		0x09, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x75, 0x72, 0x69,
		// SecurityLevel
		0x00,
		// EndpointURI
		0x06, 0x00, 0x00, 0x00, 0x65, 0x70, 0x2d, 0x75, 0x72, 0x6c,
		// Server (ApplicationDescription)
		// ApplicationURI
		0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
		// ProductURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// ApplicationName
		0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
		0x6e, 0x61, 0x6d, 0x65,
		// ApplicationType
		0x00, 0x00, 0x00, 0x00,
		// GatewayServerURI
		0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryProfileURI
		0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
		// DiscoveryURIs
		0x02, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
		0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
		// ServerCertificate
		0xff, 0xff, 0xff, 0xff,
		// MessageSecurityMode
		0x01, 0x00, 0x00, 0x00,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// UserIdentityTokens
		// ArraySize
		0x02, 0x00, 0x00, 0x00,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// PolicyID
		0x01, 0x00, 0x00, 0x00, 0x31,
		// TokenType
		0x00, 0x00, 0x00, 0x00,
		// IssuedTokenType
		0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
		// IssuerEndpointURI
		0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
		// SecurityPolicyURI
		0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
		// TransportProfileURI
		0x09, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x75, 0x72, 0x69,
		// SecurityLevel
		0x00,
	},
	{},
	{},
	{},
}

func TestDecodeEndpointDescription(t *testing.T) {
	t.Run("single", func(t *testing.T) {
		t.Parallel()
		e, err := DecodeEndpointDescription(testEndpointDescriptionBytes[0])
		if err != nil {
			t.Fatalf("Failed to decode EndpointDescription: %s", err)
		}

		switch {
		case e.EndpointURL.Get() != "ep-url":
			t.Errorf("EndpointURL doesn't match. Want: %s, Got: %s", "ep-url", e.EndpointURL.Get())
		case e.ServerCertificate.Get() != nil:
			t.Errorf("ServerCertificate doesn't match. Want: %v, Got: %v", nil, e.ServerCertificate.Get())
		case e.MessageSecurityMode != SecModeNone:
			t.Errorf("MessageSecurityMode doesn't match. Want: %d, Got: %d", SecModeNone, e.MessageSecurityMode)
		case e.SecurityPolicyURI.Get() != "sec-uri":
			t.Errorf("SecurityPolicyURI doesn't match. Want: %s, Got: %s", "sec-uri", e.SecurityPolicyURI.Get())
		case e.TransportProfileURI.Get() != "trans-uri":
			t.Errorf("TransportProfileURI doesn't match. Want: %s, Got: %s", "trans-uri", e.TransportProfileURI.Get())
		case e.SecurityLevel != 0:
			t.Errorf("SecurityLevel doesn't match. Want: %d, Got: %d", 0, e.SecurityLevel)
		}
		t.Log(e)
	})
	t.Run("multiple", func(t *testing.T) {
		t.Parallel()
		e, err := DecodeEndpointDescriptionArray(testEndpointDescriptionBytes[1])
		if err != nil {
			t.Fatalf("Failed to decode EndpointDescription: %s", err)
		}

		for _, ep := range e.EndpointDescriptions {
			switch {
			case ep.EndpointURL.Get() != "ep-url":
				t.Errorf("EndpointURL doesn't match. Want: %s, Got: %s", "ep-url", ep.EndpointURL.Get())
			case ep.ServerCertificate.Get() != nil:
				t.Errorf("ServerCertificate doesn't match. Want: %v, Got: %v", nil, ep.ServerCertificate.Get())
			case ep.MessageSecurityMode != SecModeNone:
				t.Errorf("MessageSecurityMode doesn't match. Want: %d, Got: %d", SecModeNone, ep.MessageSecurityMode)
			case ep.SecurityPolicyURI.Get() != "sec-uri":
				t.Errorf("SecurityPolicyURI doesn't match. Want: %s, Got: %s", "sec-uri", ep.SecurityPolicyURI.Get())
			case ep.TransportProfileURI.Get() != "trans-uri":
				t.Errorf("TransportProfileURI doesn't match. Want: %s, Got: %s", "trans-uri", ep.TransportProfileURI.Get())
			case ep.SecurityLevel != 0:
				t.Errorf("SecurityLevel doesn't match. Want: %d, Got: %d", 0, ep.SecurityLevel)
			}
			t.Log(e)
		}
	})
}

func TestSerializeEndpointDescription(t *testing.T) {
	t.Run("single", func(t *testing.T) {
		t.Parallel()

		e := NewEndpointDesctiption(
			"ep-url",
			NewApplicationDescription(
				"app-uri", "prod-uri", "app-name", AppTypeServer,
				"gw-uri", "prof-uri", []string{"discov-uri-1", "discov-uri-2"},
			),
			[]byte{},
			SecModeNone,
			"sec-uri",
			NewUserTokenPolicyArray(
				[]*UserTokenPolicy{
					NewUserTokenPolicy(
						"1", UserTokenAnonymous,
						"issued-token", "issuer-uri", "sec-uri",
					),
					NewUserTokenPolicy(
						"1", UserTokenAnonymous,
						"issued-token", "issuer-uri", "sec-uri",
					),
				},
			),
			"trans-uri",
			0,
		)

		serialized, err := e.Serialize()
		if err != nil {
			t.Fatalf("Failed to serialize Service: %s", err)
		}

		for i, s := range serialized {
			x := testEndpointDescriptionBytes[0][i]
			if s != x {
				t.Errorf("Bytes doesn't match. Want: %#x, Got: %#x at %dth", x, s, i)
			}
		}
		t.Logf("%x", serialized)
	})
	t.Run("multiple", func(t *testing.T) {
		t.Parallel()

		e := NewEndpointDesctiptionArray(
			[]*EndpointDescription{
				NewEndpointDesctiption(
					"ep-url",
					NewApplicationDescription(
						"app-uri", "prod-uri", "app-name", AppTypeServer,
						"gw-uri", "prof-uri", []string{"discov-uri-1", "discov-uri-2"},
					),
					[]byte{},
					SecModeNone,
					"sec-uri",
					NewUserTokenPolicyArray(
						[]*UserTokenPolicy{
							NewUserTokenPolicy(
								"1", UserTokenAnonymous,
								"issued-token", "issuer-uri", "sec-uri",
							),
							NewUserTokenPolicy(
								"1", UserTokenAnonymous,
								"issued-token", "issuer-uri", "sec-uri",
							),
						},
					),
					"trans-uri",
					0,
				),
				NewEndpointDesctiption(
					"ep-url",
					NewApplicationDescription(
						"app-uri", "prod-uri", "app-name", AppTypeServer,
						"gw-uri", "prof-uri", []string{"discov-uri-1", "discov-uri-2"},
					),
					[]byte{},
					SecModeNone,
					"sec-uri",
					NewUserTokenPolicyArray(
						[]*UserTokenPolicy{
							NewUserTokenPolicy(
								"1", UserTokenAnonymous,
								"issued-token", "issuer-uri", "sec-uri",
							),
							NewUserTokenPolicy(
								"1", UserTokenAnonymous,
								"issued-token", "issuer-uri", "sec-uri",
							),
						},
					),
					"trans-uri",
					0,
				),
			},
		)

		serialized, err := e.Serialize()
		if err != nil {
			t.Fatalf("Failed to serialize Service: %s", err)
		}

		for i, s := range serialized {
			x := testEndpointDescriptionBytes[1][i]
			if s != x {
				t.Errorf("Bytes doesn't match. Want: %#x, Got: %#x at %dth", x, s, i)
			}
		}
		t.Logf("%x", serialized)
	})
}
