// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package services

import (
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
)

var getEndpointsResponseCases = []struct {
	description string
	structured  *GetEndpointsResponse
	serialized  []byte
}{
	{
		"normal",
		NewGetEndpointsResponse(
			NewResponseHeader(
				time.Date(2018, time.August, 10, 23, 0, 0, 0, time.UTC),
				1, 0, NewNullDiagnosticInfo(), []string{}, NewNullAdditionalHeader(), nil,
			),
			NewEndpointDescription(
				"ep-url",
				NewApplicationDescription(
					"app-uri", "prod-uri", "app-name", AppTypeServer,
					"gw-uri", "prof-uri", []string{"discov-uri-1", "discov-uri-2"},
				),
				[]byte{},
				SecModeNone,
				"sec-uri",
				NewUserTokenPolicyArray(
					[]*UserTokenPolicy{
						NewUserTokenPolicy(
							"1", UserTokenAnonymous,
							"issued-token", "issuer-uri", "sec-uri",
						),
						NewUserTokenPolicy(
							"1", UserTokenAnonymous,
							"issued-token", "issuer-uri", "sec-uri",
						),
					},
				),
				"trans-uri",
				0,
			),
			NewEndpointDescription(
				"ep-url",
				NewApplicationDescription(
					"app-uri", "prod-uri", "app-name", AppTypeServer,
					"gw-uri", "prof-uri", []string{"discov-uri-1", "discov-uri-2"},
				),
				[]byte{},
				SecModeNone,
				"sec-uri",
				NewUserTokenPolicyArray(
					[]*UserTokenPolicy{
						NewUserTokenPolicy(
							"1", UserTokenAnonymous,
							"issued-token", "issuer-uri", "sec-uri",
						),
						NewUserTokenPolicy(
							"1", UserTokenAnonymous,
							"issued-token", "issuer-uri", "sec-uri",
						),
					},
				),
				"trans-uri",
				0,
			),
		),
		[]byte{
			// TypeID
			0x01, 0x00, 0xaf, 0x01,
			// Timestamp
			0x00, 0x98, 0x67, 0xdd, 0xfd, 0x30, 0xd4, 0x01,
			// RequestHandle
			0x01, 0x00, 0x00, 0x00,
			// ServiceResult
			0x00, 0x00, 0x00, 0x00,
			// ServiceDiagnostics
			0x00,
			// StringTable
			0x00, 0x00, 0x00, 0x00,
			// AdditionalHeader
			0x00, 0x00, 0x00,
			// Endpoints
			// ArraySize: 2
			0x02, 0x00, 0x00, 0x00,
			// EndpointURI
			0x06, 0x00, 0x00, 0x00, 0x65, 0x70, 0x2d, 0x75, 0x72, 0x6c,
			// Server (ApplicationDescription)
			// ApplicationURI
			0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
			// ProductURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
			// ApplicationName
			0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
			0x6e, 0x61, 0x6d, 0x65,
			// ApplicationType
			0x00, 0x00, 0x00, 0x00,
			// GatewayServerURI
			0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryProfileURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x66, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryURIs
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
			// ServerCertificate
			0xff, 0xff, 0xff, 0xff,
			// MessageSecurityMode
			0x01, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// UserIdentityTokens
			// ArraySize
			0x02, 0x00, 0x00, 0x00,
			// PolicyID
			0x01, 0x00, 0x00, 0x00, 0x31,
			// TokenType
			0x00, 0x00, 0x00, 0x00,
			// IssuedTokenType
			0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
			// IssuerEndpointURI
			0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// PolicyID
			0x01, 0x00, 0x00, 0x00, 0x31,
			// TokenType
			0x00, 0x00, 0x00, 0x00,
			// IssuedTokenType
			0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
			// IssuerEndpointURI
			0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// TransportProfileURI
			0x09, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x75, 0x72, 0x69,
			// SecurityLevel
			0x00,
			// EndpointURI
			0x06, 0x00, 0x00, 0x00, 0x65, 0x70, 0x2d, 0x75, 0x72, 0x6c,
			// Server (ApplicationDescription)
			// ApplicationURI
			0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
			// ProductURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
			// ApplicationName
			0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
			0x6e, 0x61, 0x6d, 0x65,
			// ApplicationType
			0x00, 0x00, 0x00, 0x00,
			// GatewayServerURI
			0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryProfileURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x66, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryURIs
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
			// ServerCertificate
			0xff, 0xff, 0xff, 0xff,
			// MessageSecurityMode
			0x01, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// UserIdentityTokens
			// ArraySize
			0x02, 0x00, 0x00, 0x00,
			// PolicyID
			0x01, 0x00, 0x00, 0x00, 0x31,
			// TokenType
			0x00, 0x00, 0x00, 0x00,
			// IssuedTokenType
			0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
			// IssuerEndpointURI
			0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// PolicyID
			0x01, 0x00, 0x00, 0x00, 0x31,
			// TokenType
			0x00, 0x00, 0x00, 0x00,
			// IssuedTokenType
			0x0c, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
			// IssuerEndpointURI
			0x0a, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2d, 0x75, 0x72, 0x69,
			// SecurityPolicyURI
			0x07, 0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x2d, 0x75, 0x72, 0x69,
			// TransportProfileURI
			0x09, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x75, 0x72, 0x69,
			// SecurityLevel
			0x00,
		},
	},
}

func TestDecodeGetEndpointsResponse(t *testing.T) {
	for _, c := range getEndpointsResponseCases {
		got, err := DecodeGetEndpointsResponse(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		// need to clear Payload here.
		got.Payload = nil

		if diff := cmp.Diff(got, c.structured, decodeCmpOpt); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeGetEndpointsResponse(t *testing.T) {
	for _, c := range getEndpointsResponseCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestGetEndpointsResponseLen(t *testing.T) {
	for _, c := range getEndpointsResponseCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestGetEndpointsResponseServiceType(t *testing.T) {
	for _, c := range getEndpointsResponseCases {
		if c.structured.ServiceType() != ServiceTypeGetEndpointsResponse {
			t.Errorf(
				"ServiceType doesn't match. Want: %d, Got: %d",
				ServiceTypeGetEndpointsResponse,
				c.structured.ServiceType(),
			)
		}
	}
}
