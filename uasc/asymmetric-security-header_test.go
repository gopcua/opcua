// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package uasc

import (
	"reflect"
	"testing"

	"github.com/google/go-cmp/cmp"
)

var asymHdrCases = []struct {
	description string
	structured  *AsymmetricSecurityHeader
	serialized  []byte
}{
	{
		"normal",
		NewAsymmetricSecurityHeader(
			"http://gopcua.example/OPCUA/SecurityPolicy#Foo",
			[]byte{0xde, 0xad},
			[]byte{0xbe, 0xef},
			[]byte{0xde, 0xad, 0xbe, 0xef},
		),
		[]byte{
			// SecurityPolicyURILength
			0x2e, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x67,
			0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x65, 0x78,
			0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x4f, 0x50,
			0x43, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75,
			0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
			0x63, 0x79, 0x23, 0x46, 0x6f, 0x6f,
			// SenderCertificate
			0x02, 0x00, 0x00, 0x00, 0xde, 0xad,
			// ReceiverCertificateThumbprint
			0x02, 0x00, 0x00, 0x00, 0xbe, 0xef,
			// dummy Payload
			0xde, 0xad, 0xbe, 0xef,
		},
	}, {
		"no-uri",
		NewAsymmetricSecurityHeader(
			"",
			[]byte{0xde, 0xad},
			[]byte{0xbe, 0xef},
			[]byte{0xde, 0xad, 0xbe, 0xef},
		),
		[]byte{
			// SecurityPolicyURILength
			0xff, 0xff, 0xff, 0xff,
			// SenderCertificate
			0x02, 0x00, 0x00, 0x00, 0xde, 0xad,
			// ReceiverCertificateThumbprint
			0x02, 0x00, 0x00, 0x00, 0xbe, 0xef,
			// dummy Payload
			0xde, 0xad, 0xbe, 0xef,
		},
	}, {
		"no-cert",
		NewAsymmetricSecurityHeader(
			"http://gopcua.example/OPCUA/SecurityPolicy#Foo",
			nil,
			[]byte{0xbe, 0xef},
			[]byte{0xde, 0xad, 0xbe, 0xef},
		),
		[]byte{
			// SecurityPolicyURILength
			0x2e, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x67,
			0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x65, 0x78,
			0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x4f, 0x50,
			0x43, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75,
			0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
			0x63, 0x79, 0x23, 0x46, 0x6f, 0x6f,
			// SenderCertificate
			0xff, 0xff, 0xff, 0xff,
			// ReceiverCertificateThumbprint
			0x02, 0x00, 0x00, 0x00, 0xbe, 0xef,
			// dummy Payload
			0xde, 0xad, 0xbe, 0xef,
		},
	}, {
		"no-thumb",
		NewAsymmetricSecurityHeader(
			"http://gopcua.example/OPCUA/SecurityPolicy#Foo",
			[]byte{0xde, 0xad},
			nil,
			[]byte{0xde, 0xad, 0xbe, 0xef},
		),
		[]byte{
			// SecurityPolicyURILength
			0x2e, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x67,
			0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x65, 0x78,
			0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x4f, 0x50,
			0x43, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75,
			0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
			0x63, 0x79, 0x23, 0x46, 0x6f, 0x6f,
			// SenderCertificate
			0x02, 0x00, 0x00, 0x00, 0xde, 0xad,
			// ReceiverCertificateThumbprint
			0xff, 0xff, 0xff, 0xff,
			// dummy Payload
			0xde, 0xad, 0xbe, 0xef,
		},
	}, {
		"no-payload",
		NewAsymmetricSecurityHeader(
			"http://gopcua.example/OPCUA/SecurityPolicy#Foo",
			[]byte{0xde, 0xad},
			[]byte{0xbe, 0xef},
			nil,
		),
		[]byte{
			// SecurityPolicyURILength
			0x2e, 0x00, 0x00, 0x00,
			// SecurityPolicyURI
			0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x67,
			0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x65, 0x78,
			0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x4f, 0x50,
			0x43, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75,
			0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
			0x63, 0x79, 0x23, 0x46, 0x6f, 0x6f,
			// SenderCertificate
			0x02, 0x00, 0x00, 0x00, 0xde, 0xad,
			// ReceiverCertificateThumbprint
			0x02, 0x00, 0x00, 0x00, 0xbe, 0xef,
		},
	}, {
		"nothing",
		NewAsymmetricSecurityHeader(
			"",
			nil,
			nil,
			nil,
		),
		[]byte{
			// SecurityPolicyURILength
			0xff, 0xff, 0xff, 0xff,
			// SenderCertificate
			0xff, 0xff, 0xff, 0xff,
			// ReceiverCertificateThumbprint
			0xff, 0xff, 0xff, 0xff,
		},
	},
}

func TestDecodeAsymmetricSecurityHeader(t *testing.T) {
	// option to regard []T{} and []T{nil} as equal
	// https://godoc.org/github.com/google/go-cmp/cmp#example-Option--EqualEmpty
	alwaysEqual := cmp.Comparer(func(_, _ interface{}) bool { return true })
	opt := cmp.FilterValues(func(x, y interface{}) bool {
		vx, vy := reflect.ValueOf(x), reflect.ValueOf(y)
		return (vx.IsValid() && vy.IsValid() && vx.Type() == vy.Type()) &&
			(vx.Kind() == reflect.Slice) && (vx.Len() == 0 && vy.Len() == 0)
	}, alwaysEqual)

	for _, c := range asymHdrCases {
		got, err := DecodeAsymmetricSecurityHeader(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.structured, opt); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeAsymmetricSecurityHeader(t *testing.T) {
	for _, c := range asymHdrCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestAsymmetricSecurityHeaderLen(t *testing.T) {
	for _, c := range asymHdrCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}
